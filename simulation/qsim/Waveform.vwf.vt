// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/19/2021 17:46:29"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mipsProcessor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mipsProcessor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg rst;
// wires                                               
wire [31:0] Address_Add_PC;
wire [31:0] Address_in_PC;
wire [31:0] Address_out_PC;
wire [31:0] Read_Data1;
wire [31:0] Read_Data2;
wire [31:0] Read_Data_Mem;
wire clock_in;
wire clock_output;
wire [31:0] instruction;
wire [31:0] instruction_Left;
wire [31:0] out_ALU;

// assign statements (if any)                          
mipsProcessor i1 (
// port map - connection between master ports and signals/registers   
	.Address_Add_PC(Address_Add_PC),
	.Address_in_PC(Address_in_PC),
	.Address_out_PC(Address_out_PC),
	.CLK(CLK),
	.Read_Data1(Read_Data1),
	.Read_Data2(Read_Data2),
	.Read_Data_Mem(Read_Data_Mem),
	.clock_in(clock_in),
	.clock_output(clock_output),
	.instruction(instruction),
	.instruction_Left(instruction_Left),
	.out_ALU(out_ALU),
	.rst(rst)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #50000 1'b1;
	#50000;
end 

// rst
initial
begin
	rst = 1'b1;
end 
endmodule

