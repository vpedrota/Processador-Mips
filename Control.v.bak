module Control_Unit(op,RegDst,jump,Branch,MemRead,MemtoReg,ALUop,MemWrite,ALUSrc,RegWrite);
 input [5:0] op;
 output reg RegDst,jump,Branch,MemtoReg,ALUSrc,RegWrite,MemWrite,MemRead;
 output reg [1:0] ALUop;
 always @ *
 begin
  case(op)
  //R type instruction
  6'd0:begin 
  RegDst <= 1; jump <= 0; ALUop <= 2'b10;
  Branch <= 0; MemtoReg <= 0; RegWrite <= 1;
  MemWrite <= 0; MemRead <= 0; ALUSrc <= 0;end
  //I type lw save instruction
  6'd35:begin
  RegDst <= 0; jump <= 0; ALUop <= 2'b00;
  Branch <= 0; MemtoReg <= 1; RegWrite <= 1;
  MemWrite <= 0; MemRead <= 1; ALUSrc <= 1;end
  //I type sw fetch instruction
  6'd43:begin
  RegDst <= 0; jump <= 0; ALUop <= 2'b00;
  Branch <= 0; MemtoReg <= 0; RegWrite <= 0;
  MemWrite <= 1; MemRead <= 0; ALUSrc <= 1;end
  //I type beq instruction branch reverse instruction
  6'd4:begin
  RegDst <= 0; jump <= 0; ALUop <= 2'b01;
  Branch <= 1; MemtoReg <= 0; RegWrite <= 0;
  MemWrite <= 0; MemRead <= 0; ALUSrc <= 0;end
  //J type instruction
  6'd2:begin
  RegDst <= 0; jump <= 1; ALUop <= 0;
  Branch <= 0; MemtoReg <= 0; RegWrite <= 0;
  MemWrite <= 0; MemRead <= 0; ALUSrc <= 0;end
  default:begin
  RegDst <= 0; jump <= 0; ALUop <= 0;
  Branch <= 0; MemtoReg <= 0; RegWrite <= 0;
  MemWrite <= 0; MemRead <= 0; ALUSrc <= 0;end
  endcase
 end
endmodule